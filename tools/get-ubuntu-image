#!/usr/bin/env bash

[[ $VERBOSE == 1 ]] && set -x
set -o nounset -o pipefail -o errexit

usage() {
	cat >&2 <<EOF
usage: $0 [-qh] [version] [architecture] [outdir]
	-q      quiet
	-h		display help
EOF
}

msg() { echo "$@"; }

# Get cli options
while getopts "qh" OPTION; do
    case $OPTION in
	h) usage && exit 0 ;;
	q) q=true && msg() { :; } ;;
	*) usage && exit 1 ;;
	esac
done

shift $((OPTIND - 1))

version=${1:-''}
arch=${2:-''}
outdir=${3:-''}

get_input() {
	read -ep "$1" -i "$2"
	echo $REPLY
}

get_version() {
	version=$1
	case $version in
	'14.04') fullversion=$version.5 ;;
	'16.04') fullversion=$version.6 ;;
	'18.04') fullversion=$version.5 ;;
		'l') printf "Supported versions:\n14.04\n16.04\n18.04.\n" && \
             get_version $(get_input "Specify a version or l to list: " "18.04") ;;
	      *) echo "Version $version is not supported." && \
             get_version $(get_input "Specify a version or l to list: " "18.04") ;;
	esac
}

get_arch() {
	arch=$1
	case $arch in
	aarch64) arch=arm64 ;;
	 x86_64) arch=amd64 ;;
	 	'l') printf "supported architctures:\naarch64\nx86_64.\n" && \
             get_arch $(get_input "Specify an architcture or l to list: " "x86_64") ;;
	      *) echo "That architcture is not supported." && \
             get_arch $(get_input "Specify an architcture or l to list: " "x86_64") ;;
	esac
}

get_outdir() {
    if [[ -d $1 ]]
    then
        outdir=$1
    else
        echo "Directory not found." && \
        get_outdir $(get_input "Specify an output directory: " ".")
    fi
}

get_version ${version:-$(get_input "Specify version or l to list options: " "18.04")}
get_arch ${arch:-$(get_input "Specify architcture or l to list options: " "x86_64")}
get_outdir ${outdir:-$(get_input "Specify an output directory: " ".")}

path="http://cdimage.ubuntu.com/ubuntu-base/releases/$version/release"
file=ubuntu-base-${fullversion}-base-${arch}.tar.gz

cd "$outdir"
wget ${q:+-q} -N "$path/$file" "$path/SHA256SUMS" "$path/SHA256SUMS.gpg"

msg "verifing signature and keys used to sign."
statusf=$(mktemp -t get-ubuntu-image-keys-XXXXXX)

set +o pipefail
gpg --keyid-format long --verify SHA256SUMS.gpg SHA256SUMS 2>&1 | \
grep -oP "(?<=key\s)[A-Z0-9]+" > "$statusf"
set -o pipefail

msg "Fetching keys"
while read keyid
do
	gpg ${q:+--quiet} --keyserver keyserver.ubuntu.com --recv-keys $keyid
done < $statusf

if  gpg --keyid-format long --verify SHA256SUMS.gpg SHA256SUMS 2> $statusf && \
   grep "$file" SHA256SUMS | sha256sum ${q:+--status} -c
	then
        [[ ${q:-'false'} == 'true' ]] && : || cat $statusf
		msg "Image integrity verified. Creating rootfs symlink and exiting"
		ln -s "$file" rootfs.tar.gz
		rm -f "$statusf"
	else
		echo "Exiting with error: image signature could not be verified."
        [[ ${q:-'false'} == 'true' ]] && : || cat $statusf
		rm $statusf
fi
